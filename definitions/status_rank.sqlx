config {
  type: "incremental",
  schema: "product_feed",
  name: "status_rank", 
  description: "rank compared with stock level and set into a status. filtered for products with last stocked within the last 90 days",
  bigquery: {
    partitionBy: "date"
  }
}

WITH last_stocked_date AS (
  SELECT
    sku,
    MAX(SAFE_CAST(snapshot_date AS DATE)) AS last_stock_date
  FROM `crack-celerity-275610.product_feed.product_feed_snapshot` 
  WHERE SAFE_CAST(stock AS FLOAT64) > 0.0
  GROUP BY sku
),
sku_mapping AS (
  SELECT *
  FROM ${ref('variant_sku_mapping')} 
),
recent_product_skus AS (
  SELECT DISTINCT m.product_sku
  FROM last_stocked_date ls
  JOIN sku_mapping m 
    ON ls.sku = m.variant_sku
  WHERE DATE(ls.last_stock_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
),
revenue_per_product_day AS (
  SELECT
    properties.product_sku AS product_sku,
    DATE(timestamp) AS date,
    SUM(SAFE_CAST(properties.total_price AS FLOAT64)) AS revenue
  FROM `gcloudltds.eu1_3ba9a1f4_0e5f_11ed_991c_defdc205edb1_views.purchase_item`
  GROUP BY product_sku, date
),
revenue_rank AS(
  SELECT
    o.*,
    r.revenue,
    RANK() OVER (PARTITION BY o.date ORDER BY (r.revenue) DESC) AS rank_revenue
  FROM ${ref('output_stock_analysis')} o
  LEFT JOIN revenue_per_product_day r
    ON o.product_sku = r.product_sku AND o.date = r.date
)

SELECT
  rr.*,
  LAG(rr.rank_revenue) OVER (PARTITION BY rr.product_sku ORDER BY rr.date) AS previous_revenue_rank,
  LAG(rank_items_viewed) OVER (PARTITION BY rr.product_sku ORDER BY rr.date) AS previous_views_rank,
  LAG(rank_add_to_carts) OVER (PARTITION BY rr.product_sku ORDER BY rr.date) AS previous_add_to_cart_rank,
  LAG(rank_purchased_items) OVER (PARTITION BY rr.product_sku ORDER BY rr.date) AS previous_sales_rank,
  
  -- Status Flags
  CASE
    WHEN total_stock = 0 AND items_viewed = 0 THEN 'Dropped - OOS'
    WHEN total_stock > 0 AND items_viewed = 0 THEN 'Dropped - No Demand'
    WHEN items_viewed > 0 THEN 'Viewing'
    ELSE 'No Data'
  END AS views_status,
  
  CASE
    WHEN total_stock = 0 AND add_to_carts = 0 THEN 'Dropped - OOS'
    WHEN total_stock > 0 AND add_to_carts = 0 THEN 'Dropped - No Demand'
    WHEN add_to_carts > 0 THEN 'Adding to Cart'
    ELSE 'No Data'
  END AS add_to_cart_status,
  
  CASE
    WHEN total_stock = 0 AND purchased_items = 0 THEN 'Dropped - OOS'
    WHEN total_stock > 0 AND purchased_items = 0 THEN 'Dropped - No Demand'
    WHEN purchased_items > 0 THEN 'Selling'
    ELSE 'No Data'
  END AS sales_status

FROM revenue_rank rr
WHERE rr.product_sku IN (SELECT product_sku FROM recent_product_skus)
${when(incremental(), 
  `AND date > (
     SELECT IFNULL(MAX(date), DATE("2024-11-07"))
     FROM ${self()}
  )`
)}

pre_operations {
  CREATE TABLE IF NOT EXISTS ${self()} (
    date DATE,
    product_sku STRING,
    category_level_1 STRING,
    category_level_2 STRING,
    category_level_3 STRING,
    items_viewed INT64,
    add_to_carts NUMERIC,
    purchased_items NUMERIC,
    aggregated_sizes STRING,
    total_stock INT64,
    revenue FLOAT64,
    rank_items_viewed INT64,
    rank_add_to_carts INT64,
    rank_purchased_items INT64,
    rank_revenue INT64,
    previous_views_rank INT64,
    previous_add_to_cart_rank INT64,
    previous_sales_rank INT64,
    previous_revenue_rank INT64,
    views_status STRING,
    add_to_cart_status STRING,
    sales_status STRING
  ) PARTITION BY date;

  DELETE FROM ${self()}
  WHERE date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL ${constants.updatedelete_start_period} DAY) 
                  AND DATE_SUB(CURRENT_DATE(), INTERVAL ${constants.updatedelete_end_period} DAY);
}
